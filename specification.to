= Touch Markup (To) Specification

## Introduction

Touch Markup (To) is a lightweight markup language. It uses punctuation characters to inscribe meaning to otherwise plain text.

The grammar is simple to parse, allowing for easy tooling.

### Design Philosophy

__This section is non-normative.__

To is designed to be readable and collaborative. It provides features necessary for most writing work without having to resort to other tools. Notations are simple for humans and computers to understand.

Guiding principles:
1. one way to do one thing—makes for easier collaboration
1. <orthogonality><https://stackoverflow.com/questions/1527393/what-is-orthogonality>—changing A does not change B
1. be obivous—notations should be obvious in themselves
1. respect—consider, learn from, and interoperate with existing solutions
1. universally accessible—available to everyone

### Goals

__This section is non-normative.__

To aims to be
1. simple to read and collaborate;
1. consistent;
1. dependable; and
1. able to be used alongside other tools.

To will, whenever first sensible, release a stable version and promise backward compatibility.

//1. No modifiers—the structure of a document should represent the resulting document.
//1. Orthogonality—notation produces the same result no matter the context.
//1. Considerate—use notations for their known meaning and reserve common notations for other tools.
//1. Consistent—Simple rules without exceptions.
//1. Dependable—Release a stable version and promise backward compatibility whenever first sensible.
//1. Portable—Available across multiple tools and platforms.

## Conformance Requirements

The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <BCP 14><https://tools.ietf.org/html/bcp14> [<RFC 2119><https://tools.ietf.org/html/rfc2119>], [<RFC 8174><https://tools.ietf.org/html/rfc8174>] when, and only when, they appear in all capitals as shown here.

Requirements phrased in the imperative as part of algorithms (such as “strip any leading space characters” or “return false and abort these steps”) are to be interpreted with the meaning of the keyword (“MUST”, “SHOULD”, “MAY”, etc.) used in introducing the algorithm.

Conformance requirements phrased as algorithms or specific steps MAY be implemented in any manner, so long as the end result is equivalent. (In particular, the algorithms defined in this specification are intended to be easy to follow and not intended to be performant.)

## Terminology

:: EOF
    End of file. Represented as \<EOF\> in examples. Note that EOF is not a character, it merely indicates no more data.

## Notational Conventions

The syntax is specified using <Backus—Naur Form><https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form> (BNF).

## Source Code Representation

Source code MUST be Unicode text encoded in <UTF-8><https://en.wikipedia.org/wiki/UTF-8>. Anything produced by To SHOULD be encoded in UTF-8.

Whitespace consists of spaces (U+0020) and horizontal tabs (U+0009).

Newlines (U+000A) are used for line endings. Carriage returns (U+000D) SHOULD be skipped. Anything produced by To SHOULD use only newlines as line endings.

The NUL character (U+0000) MUST be replaced with the replacement character (U+FFFD) for security reasons and compatibility with other tools.

UTF-8-encoded byte order mark (U+FEFF) MUST be ignored if it is the first Unicode point in the source text for compatibility with other tools. A byte order mark SHOULD be disallowed anywhere else in the source.

## Escape Sequences

Escape sequences are used to represent special characters.

All escape sequences consist of two characters. First is always the escape character '\' and the second is a special character we want to escape.

The following escape sequences are available:

| Escape sequence | Description       |
|-----------------|-------------------|
| \\\\            | backslash         |
| \\\<            | less-than sign    |
| \\\>            | greater-than sign |
| \\\_            | underscore        |
| \\\*            | asterisk          |
| \\\=            | equals sign       |
| \\\#            | number sign       |
| \\\`            | backtick          |
| \\\-            | hypen-minus sign  |

## Syntax

Elements are divided into inline and block categories. Inline elements operate on the line they are declared on or on a part of the line they are declared on. Block elements operate on multiple contiguous lines. 

### Inline Elements

Inline elements span from the opening delimiter to the closing delimiter, newline, or EOF, whichever comes first. Some inline elements do not have a closing delimiter—they span until a newline or EOF.

``to
Tibsey is a **friendly koala**
Tibsey is a **friendly koala<newline>
Tibsey is a **friendly koala<EOF>

// comments never hurt anyone<newline>
- list // a list item<EOF>
``

### Block Elements

Block elements span contiguous lines until a blank line, closing delimiter, or another block.

``to
This paragraph
ends on the next line,
because of a blank line below.

And this paragraph
ends on the next line,
because of a list below.
- milk
``

## Elements

### Emphasis

Emphasis represents stress or emphasis of its content. Use it only if its absence would change the meaning of the content. Do not use it to convey importance; use strong for that.

``to
Tibsey is a __koala__.
``

| Element category  | inline             |
| Permitted content | strong, link, text |

Emphasis starts with a double underscore followed by zero or more occurrences of strong, link, or text and ends with a double underscore, newline, or EOF.

### Strong

Strong represents the importance, seriousness, or urgency of its contents. Use it only if its absence would change the meaning of the content. Do not use it to convey stress or emphasis; use emphasis for that.

``to
Climb **faster** Tibsey.
``

| Element category  | inline               |
| Permitted content | emphasis, link, text |

Strong starts with a double asterisk followed by zero or more occurrences of emphasis, link, or text and ends with a double asterisk, newline, or EOF.

### Paragraph

A paragraph represents a paragraph of content. It is the default block structure.

``to
// first paragraph
Tibsey is eating eucalyptus leaves.

// second paragraph
Tibsey is going shopping.
Tibsey likes to sleep.
``

| Element category  | block                        |
| Permitted content | emphasis, strong, link, text |

Paragraph consists of contiguous lines and spans until a blank line or another block. A line starts with optional whitespace, followed by zero or more occurrences of emphasis, strong, link, or text, followed by optional whitespace, and ends with a newline or EOF.

### Headings

Headings represent headings for sections and denote the structure of a document. Heading levels range from 1 to unlimited—level 1 being the most important. Use headings to create a hierarchy. Use them to create nested sections where the heading levels are implicit in the resulting structure. Do not use headings for styling, i.e., to render larger font sizes.

``to
= Koalas

## Introduction

Koalas are not bears—they are marsupials...

## Habitat

Koalas live in the eucalyptus forests of southeastern and eastern Australia. When not sleeping, they are usually eating...

### Australia

// ...
``

* Text in the example above is from <Koala, facts, and photos - National Geographic><https://www.nationalgeographic.com/animals/mammals/k/koala/>.

| Element category  | block                        |
| Permitted content | emphasis, strong, link, text |

#### Unnumbered

Unnumbered headings start with optional whitespace, followed by one or more equals signs, followed by optional whitespace, followed by zero or more occurrences of emphasis, strong, link, or text, followed by optional whitespace, and end with a newline or EOF.

#### Numbered

Numbered headings automatically apply a numbering scheme to the headings. Numbered heading level 1 is not permitted as it should only be used as a document title for which a number most often is not wanted. Additionally, by not allowing a level 1 heading, numbered headings can be easily discernible from hashtags. 

Numbered headings start with optional whitespace, followed by two or more number signs, followed by zero or more occurrences of emphasis, strong, link, or text, followed by optional whitespace, and end with a newline or EOF.

### Links

Links create links to documents, locations in the same document, email addresses, or anything a URL can address.

``to
// link to location in the same document with text "#references"
<#references>

// link to a relative web page with text "Mammals"
<Mammalss></type/mammals>

// link to the National Geographic website with text "Koala, facts, and photos"
<Koala, facts, and photos><https://www.nationalgeographic.com/animals/mammals/k/koala/>

// link to email with text "mailto:tibsey@koala.test"
<mailto:tibsey@koala.test>
``

| Element category  | inline                 |
| Permitted content | emphasis, strong, text |

Links consist of a link destination and an optional link text. The link destination is used as the link text if the link text is not present. The link text must be placed right after the link destination if they are both present.

The link destination starts with a less-than sign followed by zero or more occurrences of text and ends with a greater-than sign, newline, or EOF.

The link text starts with a less-than sign followed by zero or more occurrences of emphasis, strong, or text and ends with a greater-than sign, newline, or EOF.

Greater-than sign is not permitted as content in either link destination or link text. To avoid unexpected links use percent-encoded URLs or escape sequences. '>' can be percent-encoded as '%3E' or escaped as '\>'.

### Code Blocks

Code blocks represent computer code.

```to
``ts
function displayButton(): void {
    const button = document.querySelector("button")
    button.style.display = "block"
    // ...
``
```

| Element category  | block  |
| Permitted content | text   |

A code block starts with optional whitespace, followed by two or more occurrences of backticks, followed by optional whitespace, followed by optional metadata, followed by optional whitespace, followed by a newline or EOF. Next is the code block body which consists of zero or more lines of text. Finally, the code block ends with greater than or equal to number of backticks as the number of backticks used  in the opening delimiter.

Metadata consists of a language used in the code block body, followed by an optional sequence of whitespace, a comma, whitespace, and a filename. The language is usually used for syntax highlighting and the filename may be used in the presentation of the code block.

### Lists

``to
// unordered
- milk
- sugar
- bananas

// ordered - numbered
1. eat
1. sleep
1. repeat

// ordered - zero-based numbered
0. eat
0. sleep
0. repeat

// ordered - lowercase letters
a. happiness
a. sadness
a. fear

// ordered - lowercase Roman numerals
i. Find the larges domain that makes...
i. Construct an example...

// continuation - start counting onward from the previous list
1. I am climbing down the bamboo,
1. thinking to myself,

Aha!

1. I must get meself some leaves, // this list will start counting from 3
1. to get me high again.
``

| Element category  | block                              |
| Permitted content | list, emphasis, strong, link, text |

Lists can be unordered or ordered. Ordered lists are available in the following numbering types:
- numbers
- lowercase letters
- uppercase letters
- lowercase Roman numerals
- uppercase Roman numerals

Lists consist of consecutive list items of the same type. For example, an unordered list item followed by a numbered list item represent two lists, an unordered list followed by a numbered list.

List items start with a marker, followed by optional whitespace, followed by optional inline content and list item continuation, and end with a newline or EOF.

List marker depends on the list type and the list numbering type if an ordered list. Unordered list marker is `-` and the ordered list markers are
- `0.` for zero-based numbers
- `1.` for one-based numbers
- `a.` for lowercase letters
- `A.` for uppercase letters
- `i.` for lowercase Roman numerals
- `I.` for uppercase Roman numerals

Inline content must be placed on the line the list item is declared on or as a part of list item continuation. Nested lists must be placed as a part of list item contiunuation.

List item continuation are the lines following the list item line that have greater indentation than the line the list item is declared on and span until a blank line or another block element.

Tab equals the width of 8 spaces in case of mixed indentation. For example, a list item indented by a tab and another by eight spaces will be treated the same. Note that the tab width is used only for determining the indentation of lists if mixed indentation is used. It does not mean that tabs equal 8 spaces; a tab is a tab, its width depends on the environment and is variable.
