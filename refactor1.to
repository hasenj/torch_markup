% Title Refactor1
% Date  January 12, 2021

= Refactor1
_ Everything is a walled | offside | fenced | uniform | escaped | composite element

.tableOfContents

== Abstract

Simplify, unify, and abstract parsing: break down syntax into six groups into which (almost) all elements will fit.

## Block Elements
_ Elements that operate on contiguous, homogeneous lines.

Block elements are denoted by a delimiter placed at the start of a line or the start of another block. Around the delimiters can be whitespace which is discarded. The delimiters consist of US-ASCII punctuation characters, usually from one character but there can be more.

* Why usually one character delimiters for blocks, but two for inline elements?
	Block elements must be placed at the start of a line or at the start of another block. We rarely use punctuation at the start of our writing so it is pretty obvious what we want if we place a punctuation character at the start. Meanwhile, placing a punctuation character mid-sentence is not obvious that we want markup, but rather, one would assume, punctuation.

### Walled

Walled elements span contiguous, homogeneous, block-delimited lines. The delimiters must consist of a single US-ASCII punctuation character. Walled elements can contain any block element, including themselves. 

+ blockquote
``to
> Quote
> still
> here
but not here
``

### Offside

Offside elements start like any block element; with a block delimiter at the start of a line or at the start of another block. However, they continue on subsequent lines only if they are indented more than the start of the delimiter. Most often, the starting line is the element's header and the subsequent indented lines are its body. Offside elements can contain any block element, including themselves.

+ description list
``to
* Question
 Answer

// or

* Question
	Answer

// invalid—represents a description list followed by a paragraph

* Question
Answer
``

### Fenced

Fenced elements start with a delimiter and end with a delimiter, both of which must be placed on their lines. Everything between the delimiters, except the line of the opening delimiter, is the element's content. Content following the opening delimiter until a newline is the element's metadata. Content following the closing delimiter until a newline is discarded. Unlike walled and offside elements, fenced elements can only contain raw content.

+ code block
```to
``
this
is
all
code
block
content
and
**other elements do not work here**
``
```

+ code block with metadata declaring the language
```to
``to
= Title
``
```

+ code block with content following the closing delimiter until a newline that is discarded
```to
``
code...
``this is discarded
```

As only raw content is permitted, escape sequences do not work. For that reason, we escape by adding more delimiter characters. For example, `*``*` inside a code block:

````to
```to
``We used three backticks for delimiters so we can use two backticks in here.
```
````

Prefer as few delimiter characters as possible.

### Walled or Offside?

For some elements, it can be hard to determine if they are a walled or an offside element. Both start with a delimiter and their content is placed consecutively. Let us look at an example:

+ blockquote and a list
``to
> A
> long
> quote

- 1
- 2
- 3
``

The blockquote and the list in the example above both look very similar. They both start with a single delimiter and their content is laid out consecutively. At first glance, they both seem to be walled elements. But there is a difference—the block quote is a single element and the list consists of three consecutive elements (list items). The following two examples better illustrate the difference:

+ paragraph in a blockquote and three list items
``to
> This is
> all the same
> paragraph

- this is separate text
- this is separate text
- and this is separate text
``

+ paragraph in a blockquote and a paragraph in a list item
``to
> This is
> all the same
> paragraph

-
	This is
	all the same
	paragraph
``

* Which element is a list?
	A list is none of the elements we describe. It is a meta element. Every list item is a part of a list that is automatically created. Contiguous list items belong to the same list.

* Which element is a list item?
	A list item is, as we determined above, an offside element.

## Inline Elements
_ Elements that operate inside line boundaries.

Inline elements are denoted by an opening and a closing delimiter. A newline or the end of the file, whichever comes first, acts as the closing delimiter if an actual closing delimiter is not present. The delimiters consist of two US-ASCII punctuation characters.

* Why two-character delimiters, are not single-character delimiters better?
	At first, single-character delimiters appear better. They are more common and add less visual noise. However, we usually do not want to just sprinkle emphases or links all over. We want to add meaning. We want to emphasize a certain word. Therefore, it is not bad that these elements are more pronounced and distinguished from punctuation. Furthermore, by using two-character delimiters, there are no surprises when one just wishes to write without interruptions. At the heart of Touch is a pleasurable writing experience for everyone, including newcomers. Anyone should be able to write their thoughts without an asterisk emphasizing the rest of the paragraph when they just wanted a simple asterisk. Two-character delimiters achieve that and in most cases even avoid the need for backslash escapes which hurt readability. Last but not least, two-character delimiters are easier to parse as they are not dependant on context. And easier parsing means better tooling.

### Uniform

The delimiters must consist of double US-ASCII punctuation characters. Uniform elements can contain any inline element except themselves. 

+ emphasis
``to
She __yelled__.
``

### Escaped

Escaped elements are like fenced block elements regarding permitted content—they can also contain only raw content. Everything between the delimiters is raw content. The delimiters consist of two US-ASCII punctuation characters. The first opening delimiter's character determines the element and the second is an escape character. The closing delimiter, if present, must be laid out in reverse of the opening delimiter's characters. Therefore, the closing delimiter's escape character is the first character of the closing delimiter. If the escape character is a left/right character and has a left/right counterpart character, the counterpart character must be used as the closing delimiter's escape character.

+ code
````to
run ``clang main.c``.
double backticks in code `*``*`
double backticks in code `(``)` // counterpart
````

Prefer equal characters whenever possible, i.e., `*``*` instead of ```*``.

### Composite

Composite elements can consist of multiple parts. These parts can, depending on the position in the element, contain either raw content or any inline element except themselves. The delimiters are the same as the escaped element's delimiters; they consist of two US-ASCII punctuation characters, an element determiner and an escape character. The parts are separated by double escape characters (the second character of the opening delimiter). If the escape character is a left/right character and has a left/right counterpart character, they must be placed in order—the opening escape character must be followed by the closing escape character.

+ link
``to
<<https://koala.test>>

// custom text
<<Koala photos<>https://koala.test>>

// custom text and title
<<Koala photos<>https://koala.test<>Tibsey climbing a tree>>

// different escape characters
<<Koala photos<>https://koala.test>>
<>Koala photos><https://koala.test<>
<_Koala photos__https://koala.test_>
``

* Why the delimiter with an escape character?
	The delimiter escape character gives us an easy way to escape both the separator and the raw parts of the element.

## Precedence

Block elements always take precedence if a line or a block starts with characters that can start either a block or an inline element. To represent such clashing inline elements escape the block with the REVERSE SOLIDUS (``\``).

+ description list started by an asterisk
``to
* Term
	Description
``

+ strong started by two asterisks
``to
\ **Strong**
``

+ asterisk as a footnote symbol
``to
\* Note
``

@@ Examples
_ Examples of nested elements.

@@@ Walled Elements

Walled elements can contain any element. Block elements inside block elements follow the same rules as outside. A nested block element must be placed at the start of the walled element. Only whitespace can be in between, which is discarded.

+ nested block quotes
``to
> This
> > might
> > > be
> > > > a
> > > > > thread
``

+ code block in a block quote
```to
> ``c
> int x = 1;
> ``
```

+ list in a block quote
``to
> - 1
> - 2
``

+ inline elements in a block quote
```to
> **reasonable**
> __dynamic__
> ``echo "yes"``
```

@@@ Offside Elements

Offside elements can contain any element. Block elements inside block elements follow the same rules as outside. A nested block element must be indented equally or more than the body of the offside element (the indented part).

+ nested list
``to
- 1
	- 2
``

+ code block in a list
``to
- 1
	> quote
``

+ inline elements in a description list
``to
* Question?
	A __great answer.__
``

@@@ Uniform Elements

Uniform elements can contain any inline element except themselves.

+ strong in emphasis
``to
__Some **strong** here__.
``

+ link in strong
``to
**<Koala photos><https://koalaphotos.test>**
``

@@@ Composite Elements

Composite elements can contain any inline element except themselves or in the case of a raw part only raw content.

+ strong in link
``to
<**Koala** photos><https://koalaphotos.test>
``

+ emphasis in link
``to
<Koala photos><https://koalaphotos.test<>Tibsey is __climbing__>
``
