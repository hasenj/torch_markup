= Parsing

## Identation

Leading spacing (CHARACTER TABULATION and SPACE) generates INDENT tokens:

``to
// source:
	a
|	b

// scanner output:
INDENT    "\t"
TEXT      "a"
LINEFEED  "\n"
VLINE     "|"
INDENT    "\t"
TEXT      "b"
EOF       ""
``

## Offside Block Elements

+ list item
``to
- a
  b
``

+ list item tokens
''
HYPEN    "-"
INDENT   " "
TEXT     "a"
LINFEED  "\n"
INDENT   "  "
TEXT     "b"
EOF      ""
''

Offside element continues if it is prefixed with more indentation than its opening delimiter and with other block delimiters if it is nested in them.

+ nested list item
``to
| - a
|  b
``

+ nested list item tokens
''
VLINE     "|"
INDENT    " "
HYPEN     "-"
INDENT    " "
TEXT      "a"
LINEFEED  "\n"
VLINE     "|"
INDENT    "  "
TEXT      "b"
EOF       ""
''

+ parsing
''
open blocks=[]
token=VLINE literal="|" -> parse paragraph (
	open blocks=[VLINE "|"]
	token=INDENT literal=" " -> parse block (
		open blocks=[VLINE "|", INDENT " "]
		token=HYPEN  literal="-" -> parse list item (
			// do not open a block for offside elements, except if
			// the top of open blocks is not indent, add INDENT ""
			open blocks=[VLINE "|", INDENT " "]
			token=INDENT literal=" " -> parse block (
				open blocks=[VLINE "|", INDENT " ", INDENT " "]
				token=TEXT literal="a" -> parse lines (
					// remove last INDENT if token is TEXT
					// and top two open blocks are both INDENT
					// tokens
					open blocks=[VLINE "|", INDENT " "]
					token=TEXT literal="a" -> parse line (
						return "a"
					)
					token=LINEFEED literal="\n" -> continues (
						copy=[VLINE "|", INDENT " "]
						bottom=VLINE "|"
						token=VLINE literal="|" -> equals bottom, continue
						copy=[INDENT " "]
						bottom=INDENT " "
						token=INDENT literal="  " -> greater indentation than bottom, continue
						copy=[] -> empty, return true
					)
					// ...
				)
			)
		)
	)
)
''

+ paragraph in list item
''
- a
 | b

HYPEN     "-"
INDENT    " "
TEXT      "a"
LINEFEED  "\n"
INDENT    " "
VLINE     "|"
INDENT    " "
TEXT      "b"
EOF       ""
''

## Fenced Block Elements

+ code block
``to
= Title
``

``abnf
fenced = DELIM [head] LINEFEED [body] DELIM
head   = TEXT
body   = TEXT
``

Fenced element starts and ends with the same delimiter; number of characters in the delimiters must be the same. The head spans from the opening delimiter until a LINE FEED. The body spans from after the head's LINE FEED until the closing delimiter. The head and the body contain only raw content.

+ code block in paragraph
``to
|a
|``metadata
|b
|``c
``

+ code block in paragraph tokens
''
VLINE         "|"
TEXT          "a"
LINEFEED      "\n"
VLINE         "|"
GRAVEACCENTS  "``"
TEXT          "metadata"
LINEFEED      "\n"
VLINE         "|"
TEXT          "b"
LINEFEED      "\n"
VLINE         "|"
GRAVEACCENTS  "``"
TEXT          "c"
EOF           ""
''

+ parsing
''
open blocks=[]
token=VLINE literal="|" -> parse paragraph (
	open blocks=[VLINE "|"]
	token=TEXT literal="a" -> parse lines (
		open blocks=[VLINE "|"]
		token=TEXT literal="a" -> parse line (
			return "a"
		)
		token=LINEFEED literal="\n" -> continues (
			copy=[VLINE "|"]
			bottom=VLINE "|"
			token=VLINE literal="|" -> equals bottom, continue
			copy=[] -> empty, return true
		)
		token=GRAVEACCENTS literal="``" -> not TEXT, return ["a"]
	)
	token=GRAVEACCENTS literal="``" -> parse code block (
		literals=[]
		token=TEXT literal="metadata" -> push to literals
		token=LINEFEED literal="\n" -> continues (
			copy=[VLINE "|"]
			bottom=VLINE "|"
			token=VLINE literal="|" -> equals bottom, continue
			copy=[] -> empty, return true
		)
		token=TEXT literal="b" -> push to literals
		token=LINEFEED literal="\n" -> continues (same)
		token=GRAVEACCENTS literal="``" -> token matchs the opening delimiter (
			head consists of elements in literals until the first "\n"
			body consists of elements in literals after the first "\n"
		)
		return head and body
	)
	token=TEXT literal="c" -> parse lines (
		token=TEXT literal="c" -> parse line (
			return "c"
		)
		token=EOF -> return ["c"]
	)
	return paragraph
)
''

+ code block represented in code block
```a
``b
c
``
```

+ code block represented in code block tokens
''
GRAVEACCENTS  "```"
TEXT          "a"
LINEFEED      "\n"
GRAVEACCENTS  "``"
TEXT          "b"
LINEFEED      "\n"
TEXT          "c"
LINEFEED      "\n"
GRAVEACCENTS  "``"
LINEFEED      "\n"
GRAVEACCENTS  "```"
EOF           ""
''

+ parsing
''
open blocks=[] // stays empty until end
token=GRAVEACCENTS literal="```" -> parse code block (
	literals=[]
	token=TEXT literal="a" -> push to literals
	token=LINEFEED literal="\n" -> continues (
		open blocks=[] -> return true	
	)
	token=GRAVEACCENTS literal="``" -> push to literals
	token=TEXT literal="b" -> push to literals
	token=LINEFEED literal="\n" -> continues (same)
	token=TEXT literal="c" -> push to literals
	token=LINEFEED literal="\n" -> continues (same)
	token=GRAVEACCENTS literal="``" -> push to literals
	token=LINEFEED literal="\n" -> continues (same)
	token=GRAVEACCENTS literal="```" -> token matchs the opening delimiter (
		head consists of elements in literals until the first "\n"
		body consists of elements in literals after the first "\n"
	)
	return head and body
)
''

## Escaped Inline Elements

Escaped element delimiters consists of two US-ASCII punctuation characters; a delimiter and an escape character. The delimiter character determines the element. The escape character is used to escape characters in element's content, which is raw.

An opening delimiter is of form ``<delimiter character><escape character>`` and closing delimiter of form ``<escape character><delimiter character>``. The opening and closing delimiters of an element must have the same characters. If a character in the opneing delimiter is a left/right character and has a left/right counterpart, the left/right counterpart character must be used in the closing delimiter.

```to
`(left/right parentheses)` // code
<<lefit/right brackets>>   // link
```

By allowing the escape character to be any punctuation character we get some conflicts which hopefully should not be too common; if we place an escaped element delimiter before or after a puncutation character, the first two characters might denote another element rather than the one we wanted:

``to
`__ // code delimiter with content "_", not "`" followed by emphasis
__` // emphasis folowed by "`", not "_" followed by code closing delimiter
``

In such cases, we can use escape sequences to alter the behaviour.

An easy way to parse escaped elements would be to parse them in the scanner, like comments. The following example:

```to
``code``
```

would produce the following tokens:

''
CODE  "``code``"
''

But the above example actually represents a code block as the delimiter is at the start of a line/block and blocks take precedence over inlines. A simple solution would be to have some kind of a block escape implemented in the scanner, for example ``\``:

``to
\``code``
``

The problem with this approach is that we do not know whether we are at the start of a line/block in the scanner. Let us leave this job for the parser as it is actually parsing and keeps track of context.

+ code elements
``to
\``code`` // some kind of block escape
`*code*`
``

+ code element tokens
''
BLOCKESCAPE   "\"
GRAVEACCENTS  "``"
TEXT          "code"
GRAVEACCENTS  "``"
LINEFEED      "\n"
GAP           "`*"    // grave accent + punct char
TEXT          "code"
PAG           "*`"    // punct char + grave accent
''

If a GAP token or a GRAVEACCENTS token inside inline, parse until a matching closing delimiter (with reversed position of the delimiter and escape characters), LINE FEED, or EOF. Concatenate the literal values of the tokens in between the delimiters.

## Composite Inline Elements

Composite elements are very similar to escaped elements but can contain multiple parts separated by a separator which consists of the opening delimiter's escape character followed by the closing delimiter's escape character. Parts can contain other elements or be raw. Each part should be available as raw and normal content. Parsing is basically the same as for escaped elements but save the encountered tokens and literals whenever a separator is encountered not just at the end.
